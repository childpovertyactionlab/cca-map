---
pagetitle: "Child Care Quality Allocations"
format: html
---

```{r setup, output = F, echo = F}

library(tidycensus)
library(sf)
require(tidyverse)
library(leaflet)

dallas_co <- tigris::counties(state = "TX") %>%
  filter(NAME == "Dallas")

bounds <- sf::st_bbox(dallas_co)

expanded_bounds <- as.vector(c(
  xmin = bounds["xmin"] - 0.25,
  ymin = bounds["ymin"] - 0.25,
  xmax = bounds["xmax"] + 0.25,
  ymax = bounds["ymax"] + 0.25
))

cca <- readxl::read_xlsx("data/CCA Jan2024.xlsx", sheet = "Snapshot1") %>%
  filter(county == "113 - DALLAS")
# zips <- unique(cca$zip_5)

# counties <- c("Dallas County", "Collin County", "Tarrant County", "Denton County")
# tracts <- tigris::tracts(state="TX", county=counties, year=2022)
# zctas <- tigris::zctas(starts_with = "7") %>%
#   select(
#     zip_5 = "GEOID20",
#     geometry
#   ) %>%
#   filter(zip_5 %in% zips)
# st_write(zctas, "data/zctas.geojson")
zctas <- st_read("data/zctas.geojson")


# geocoded <- readxl::read_xlsx("data/CCA Jan2024.xlsx", sheet = "Visits") %>%
#   mutate(
#     address = paste0(Street, " ", City, ", ", State, " ", `Zip Code`)
#   ) %>%
#   select(
#     license_no = "License Number", address
#   ) %>%
#   distinct(license_no, .keep_all = TRUE) %>%
#   tidygeocoder::geocode(
#     address = "address",
#     method = "arcgis"
#   )
# export <- left_join(cca, geocoded) %>%
#   st_as_sf(coords = c("long", "lat"))

by_zip <- cca %>%
  group_by(zip_5) %>%
  summarize(
    providers = n(),
    subsidy = sum(`fund paid for month (accrual)`),
    quality = sum(`Quality Dollars Received`),
    children = sum(`Children Grand Total`),
    visits = sum(`Total Visits`)
  ) %>%
  mutate(
    visits_provider = visits/providers,
    qd_provider = quality/providers,
    qd_prop = quality/sum(cca$`Quality Dollars Received`)
  ) %>%
  left_join(zctas) %>%
  st_as_sf()

summary_df <- cca %>%
  group_by(designation_desc, zip_5) %>%
  summarize(
    providers = n(),
    subsidy = sum(`fund paid for month (accrual)`),
    quality = sum(`Quality Dollars Received`),
    children = sum(`Children Grand Total`),
    visits = sum(`Total Visits`)
  ) %>%
  mutate(
    visits_provider = visits/providers,
    qd_provider = quality/providers,
    qd_prop = quality/sum(cca$`Quality Dollars Received`),
    designation_desc = ifelse(is.na(designation_desc), "Other", designation_desc)
  )

library(reactable)

summary_rt <- summary_df %>%
  reactable(
    groupBy = "designation_desc",
    paginateSubRows = TRUE,
    defaultColDef = colDef(minWidth = 130),
    columns = list(
      designation_desc = colDef(
        name = "Rating",
        sticky = "left",
        minWidth = 160,
        grouped = JS("function(cellInfo) {
          return cellInfo.value
        }")),
      zip_5 = colDef(
        name = "ZIP",
        # sticky = "left",
        format = colFormat(),
        filterable = T),
      providers = colDef(
        name = "Providers",
        format = colFormat(),
        aggregate = "sum"),
      subsidy = colDef(
        name = "Subsidy dollars", 
        format = colFormat(currency = "USD", separators = TRUE, digits = 0),
        minWidth = 145,
        aggregate = "sum"),
      quality = colDef(
        name = "Quality dollars",
        format = colFormat(currency = "USD", separators = TRUE, digits = 0),
        minWidth = 145,
        aggregate = "sum"),
      children = colDef(
        name = "Num. children", 
        format = colFormat(),
        aggregate = "sum"),
      visits = colDef(
        name = "Visits", 
        format = colFormat(),
        aggregate = "sum"),
      visits_provider = colDef(
        name = "Visits/provider",
        format = colFormat(digits = 3),
        aggregate = JS("function(values, rows) {
          let totalVisits = 0
          let totalProviders = 0
          rows.forEach(function(row) {
            totalVisits += row['visits']
            totalProviders += row['providers']
          })
          return totalVisits / totalProviders
        }")
      ),
      qd_provider = colDef(
        name = "QD/provider",
        format = colFormat(currency = "USD", separators = TRUE, digits = 0),
        aggregate = JS("function(values, rows) {
          let totalQuality = 0
          let totalProviders = 0
          rows.forEach(function(row) {
            totalQuality += row['quality']
            totalProviders += row['providers']
          })
          return totalQuality / totalProviders
        }")
      ),
      qd_prop = colDef(
        name = "Pct. of total QD",
        format = colFormat(percent = TRUE, digits = 2),
        aggregate = JS(paste0("function(values, rows) {
          let totalQuality = 0
          let allQuality = ", sum(cca$`Quality Dollars Received`), "
          rows.forEach(function(row) {
            totalQuality += row['quality']
          })
          return totalQuality / allQuality
        }"))
      )
    )
  )

```

::: column-screen-inset

```{=html}
<div class="mainboxbox">
<div class="mainbox">

<div class="card" style="overflow: hidden;">

<div class="cardbox">

<div class="left-card-col dark-col"></div>

<div class="right-card-col">

  <div class="card-side" style="width:100%">
    <div style="color: #9e9e9e;; margin: 5px;">Horizontally scrollable table</div>
```    

```{r reactable}
summary_rt
```

```{=html}
  </div>
</div>

</div>

</div>
```

```{=html}

<div class="mapscroll-container">
  <a href="javascript:void(0);" class="scroll-link" onclick="scrollToMap()">
      Click for map <i class="bi bi-chevron-down"></i>
  </a>
</div>

```

```{r map}

layers <- c("Providers", "Subsidy dollars", "Quality dollars", "Num. children", "Visits", "Visits/provider", "QD/provider", "Pct. of total QD")
palette <- cpaltemplates::palette_cpal_main
palette <- c(palette[-1], palette[1])

palettes <- lapply(palette, function(color, n = 8) {colorRampPalette(c("#FFFFFF", color))(n)}, n = 8)

leaflet(data = by_zip, 
        height = "90vh", 
        width = "100%", 
        elementId = "cca-map",
        options = leafletOptions(
          zoomControl = F,
          zoomSnap = 0.5,
          zoomDelta = 0.5,
          minZoom = 9.5,
          wheelPxPerZoomLevel = 90
          )
         ) %>%
  addTiles(urlTemplate = cpaltemplates::cpal_mapbox_mono, attribution = cpaltemplates::cpal_leaflet) %>%
  addPolygons(data = by_zip,
              group = layers[[1]],
              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[1]], domain = by_zip$providers)(providers),
              stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
              popup = paste0("<b>", by_zip$zip_5, "</b><br>",
                             "Providers: ", by_zip$providers),
              highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE)
              ) %>%
  addPolygons(data = by_zip,
              group = layers[[2]],
              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[2]], domain = by_zip$subsidy)(subsidy),
              stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
              popup = paste0("<b>", by_zip$zip_5, "</b><br>",
                             "Subsidy dollars: ", scales::dollar(by_zip$subsidy)),
              highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE)
              ) %>%
  addPolygons(data = by_zip,
              group = layers[[3]],
              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[3]], domain = by_zip$quality)(quality),
              stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
              popup = paste0("<b>", by_zip$zip_5, "</b><br>",
                             "Quality dollars received: ", scales::dollar(by_zip$quality)),
              highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE)
              ) %>%
  addPolygons(data = by_zip,
              group = layers[[4]],
              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[4]], domain = by_zip$children)(children),
              stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
              popup = paste0("<b>", by_zip$zip_5, "</b><br>",
                             "Number of children: ", by_zip$children),
              highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE)
              ) %>%
  addPolygons(data = by_zip,
              group = layers[[5]],
              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[5]], domain = by_zip$visits)(visits),
              stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
              popup = paste0("<b>", by_zip$zip_5, "</b><br>",
                             "Number of visits: ", by_zip$visits),
              highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE)
              ) %>%
  addPolygons(data = by_zip,
              group = layers[[6]],
              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[6]], domain = by_zip$visits_provider)(visits_provider),
              stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
              popup = paste0("<b>", by_zip$zip_5, "</b><br>",
                             "Visits per provider: ", scales::number(by_zip$visits_provider, accuracy = 0.01)),
              highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE)
              ) %>%
  addPolygons(data = by_zip,
              group = layers[[7]],
              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[7]], domain = by_zip$qd_provider)(qd_provider),
              stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
              popup = paste0("<b>", by_zip$zip_5, "</b><br>",
                             "Quality dollars per provider: ", scales::dollar(by_zip$qd_provider)),
              highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE)
              ) %>%
  addPolygons(data = by_zip,
              group = layers[[8]],
              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[8]], domain = by_zip$qd_prop)(qd_prop),
              stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
              popup = paste0("<b>", by_zip$zip_5, "</b><br>",
                             "Percent of all quality dollars: ", scales::percent(by_zip$qd_prop, accuracy = 0.01)),
              highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE)
              ) %>%
  addPolygons(
    group = layers,
    data = dallas_co,
    fillColor = "#333333",
    fillOpacity = 0.0, weight = 2, color = "#333333",
    smoothFactor = 1,
    options = pathOptions(clickable = F, interactive = F)
  ) %>%
  addLayersControl(
    baseGroups = layers,
    position = "topleft",
    options = layersControlOptions(collapsed = FALSE)
  ) %>%
  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])

```

```{=html}

<script>
function scrollToMap() {
    const element = document.getElementById('cca-map');
    const headerOffset = 70; // height of your fixed header
    const elementPosition = element.getBoundingClientRect().top;
    const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

    window.scrollTo({
        top: offsetPosition,
        behavior: 'smooth'
    });
}
</script>

```


```{=html}
</div>
</div>

```

:::