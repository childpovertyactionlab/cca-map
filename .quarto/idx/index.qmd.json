{"title":"zips <- unique(cca$zip_5)","markdown":{"yaml":{"pagetitle":"CCA","format":"html"},"headingText":"zips <- unique(cca$zip_5)","containsRefs":false,"markdown":"\n\n```{r setup, output = F, echo = F}\n\nlibrary(tidycensus)\nlibrary(sf)\nrequire(tidyverse)\nlibrary(leaflet)\n\ndallas_co <- tigris::counties(state = \"TX\") %>%\n  filter(NAME == \"Dallas\")\n\nbounds <- sf::st_bbox(dallas_co)\n\nexpanded_bounds <- as.vector(c(\n  xmin = bounds[\"xmin\"] - 0.25,\n  ymin = bounds[\"ymin\"] - 0.25,\n  xmax = bounds[\"xmax\"] + 0.25,\n  ymax = bounds[\"ymax\"] + 0.25\n))\n\ncca <- readxl::read_xlsx(\"data/CCA Jan2024.xlsx\", sheet = \"Snapshot1\") %>%\n  filter(county == \"113 - DALLAS\")\n\n# counties <- c(\"Dallas County\", \"Collin County\", \"Tarrant County\", \"Denton County\")\n# tracts <- tigris::tracts(state=\"TX\", county=counties, year=2022)\n# zctas <- tigris::zctas(starts_with = \"7\") %>%\n#   select(\n#     zip_5 = \"GEOID20\",\n#     geometry\n#   ) %>%\n#   filter(zip_5 %in% zips)\n# st_write(zctas, \"data/zctas.geojson\")\nzctas <- st_read(\"data/zctas.geojson\")\n\n\n# geocoded <- readxl::read_xlsx(\"data/CCA Jan2024.xlsx\", sheet = \"Visits\") %>%\n#   mutate(\n#     address = paste0(Street, \" \", City, \", \", State, \" \", `Zip Code`)\n#   ) %>%\n#   select(\n#     license_no = \"License Number\", address\n#   ) %>%\n#   distinct(license_no, .keep_all = TRUE) %>%\n#   tidygeocoder::geocode(\n#     address = \"address\",\n#     method = \"arcgis\"\n#   )\n# export <- left_join(cca, geocoded) %>%\n#   st_as_sf(coords = c(\"long\", \"lat\"))\n\nby_zip <- cca %>%\n  group_by(zip_5) %>%\n  summarize(\n    providers = n(),\n    subsidy = sum(`fund paid for month (accrual)` + `fund paid in month (cash)`),\n    quality = sum(`Quality Dollars Received`),\n    children = sum(`Children Grand Total`),\n    visits = sum(`Total Visits`)\n  ) %>%\n  mutate(\n    visits_provider = visits/providers,\n    qd_provider = quality/providers,\n    qd_prop = quality/sum(cca$`Quality Dollars Received`)\n  ) %>%\n  left_join(zctas) %>%\n  st_as_sf()\n\nsummary_df <- cca %>%\n  group_by(designation_desc, zip_5) %>%\n  summarize(\n    providers = n(),\n    subsidy = sum(`fund paid for month (accrual)` + `fund paid in month (cash)`),\n    quality = sum(`Quality Dollars Received`),\n    children = sum(`Children Grand Total`),\n    visits = sum(`Total Visits`)\n  ) %>%\n  mutate(\n    visits_provider = visits/providers,\n    qd_provider = quality/providers,\n    qd_prop = quality/sum(cca$`Quality Dollars Received`),\n    designation_desc = ifelse(is.na(designation_desc), \"Other\", designation_desc)\n  )\n\nlibrary(reactable)\n\nsummary_rt <- summary_df %>%\n  reactable(\n    width = \"53vw\",\n    groupBy = \"designation_desc\",\n    paginateSubRows = TRUE,\n    defaultColDef = colDef(minWidth = 150),\n    columns = list(\n      designation_desc = colDef(\n        name = \"Rating\",\n        sticky = \"left\",\n        minWidth = 180,\n        grouped = JS(\"function(cellInfo) {\n          return cellInfo.value\n        }\")),\n      zip_5 = colDef(\n        name = \"ZIP\",\n        sticky = \"left\",\n        format = colFormat(),\n        filterable = T),\n      providers = colDef(\n        name = \"Providers\",\n        format = colFormat(),\n        aggregate = \"sum\"),\n      subsidy = colDef(\n        name = \"Subsidy dollars\", \n        format = colFormat(currency = \"USD\", separators = TRUE),\n        minWidth = 165,\n        aggregate = \"sum\"),\n      quality = colDef(\n        name = \"Quality dollars\",\n        format = colFormat(currency = \"USD\", separators = TRUE),\n        minWidth = 165,\n        aggregate = \"sum\"),\n      children = colDef(\n        name = \"Num. children\", \n        format = colFormat(),\n        aggregate = \"sum\"),\n      visits = colDef(\n        name = \"Visits\", \n        format = colFormat(),\n        aggregate = \"sum\"),\n      visits_provider = colDef(\n        name = \"Visits/provider\",\n        format = colFormat(digits = 3),\n        aggregate = JS(\"function(values, rows) {\n          let totalVisits = 0\n          let totalProviders = 0\n          rows.forEach(function(row) {\n            totalVisits += row['visits']\n            totalProviders += row['providers']\n          })\n          return totalVisits / totalProviders\n        }\")\n      ),\n      qd_provider = colDef(\n        name = \"QD/provider\",\n        format = colFormat(currency = \"USD\", separators = TRUE),\n        aggregate = JS(\"function(values, rows) {\n          let totalQuality = 0\n          let totalProviders = 0\n          rows.forEach(function(row) {\n            totalQuality += row['quality']\n            totalProviders += row['providers']\n          })\n          return totalQuality / totalProviders\n        }\")\n      ),\n      qd_prop = colDef(\n        name = \"Pct. of total QD\",\n        format = colFormat(percent = TRUE, digits = 2),\n        aggregate = JS(paste0(\"function(values, rows) {\n          let totalQuality = 0\n          let allQuality = \", sum(cca$`Quality Dollars Received`), \"\n          rows.forEach(function(row) {\n            totalQuality += row['quality']\n          })\n          return totalQuality / allQuality\n        }\"))\n      )\n    )\n  )\n\n```\n\n::: column-screen-inset\n\n```{=html}\n<div class=\"mainboxbox\">\n<div class=\"mainbox\">\n```\n\n:::: {.card}\n\n```{=html}\n<div class=\"cardbox\">\n\n<div class=\"left-card-col dark-col\">\n```\n\n```{=html}\n  <div class=\"card-side\" style=\"width: 94%;\">\n```\n\n# Title\n\n```{=html}\n    <div class=\"subtext\">\n      Write a description and/or choose a \"big number\" to go here\n    </div>\n  </div>\n</div>\n```\n\n```{=html}\n<div class=\"right-card-col\">\n\n  <div style=\"width: 3%\">\n  </div>\n\n  <div class=\"card-side\">\n```    \n\n```{r reactable}\nsummary_rt\n```\n\n```{=html}\n  </div>\n</div>\n\n</div>\n\n```\n\n::::\n\n```{=html}\n\n<div class=\"mapscroll-container\">\n  <a href=\"javascript:void(0);\" class=\"scroll-link\" onclick=\"scrollToMap()\">\n      Click for map <i class=\"bi bi-chevron-down\"></i>\n  </a>\n</div>\n\n```\n\n```{r map}\n\nlayers <- c(\"Providers\", \"Subsidy dollars\", \"Quality dollars\", \"Num. children\", \"Visits\", \"Visits/provider\", \"QD/provider\", \"Pct. of total QD\")\npalette <- cpaltemplates::palette_cpal_main\n\npalettes <- lapply(palette, function(color, n = 8) {colorRampPalette(c(\"#FFFFFF\", color))(n)}, n = 8)\n\nleaflet( data = by_zip, \n         height = \"90vh\", \n         width = \"100%\", \n         elementId = \"cca-map\",\n         options = leafletOptions(\n           zoomControl = F,\n           zoomSnap = 0.5,\n           zoomDelta = 0.5,\n           minZoom = 9.5,\n           wheelPxPerZoomLevel = 90\n           )\n         ) %>%\n  addTiles(urlTemplate = cpaltemplates::cpal_mapbox_mono, attribution = cpaltemplates::cpal_leaflet) %>%\n  addPolygons(data = by_zip,\n              group = layers[[1]],\n              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[1]], domain = by_zip$providers)(providers),\n              stroke = TRUE, color = \"#FFFFFF\", weight = 1.5, opacity = 0,\n              popup = paste0(\"<b>\", by_zip$zip_5, \"</b><br>\",\n                             \"Providers: \", by_zip$providers),\n              highlight = highlightOptions(\n                weight = 1.5,\n                fillOpacity = 0.7,\n                color = \"#333333\",\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE)\n              ) %>%\n  addPolygons(data = by_zip,\n              group = layers[[2]],\n              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[2]], domain = by_zip$subsidy)(subsidy),\n              stroke = TRUE, color = \"#FFFFFF\", weight = 1.5, opacity = 0,\n              popup = paste0(\"<b>\", by_zip$zip_5, \"</b><br>\",\n                             \"Subsidy dollars: \", scales::dollar(by_zip$subsidy), \"<br>\",\n                             \"(Subsidy dollars include cash and accrued)\"),\n              highlight = highlightOptions(\n                weight = 1.5,\n                fillOpacity = 0.7,\n                color = \"#333333\",\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE)\n              ) %>%\n  addPolygons(data = by_zip,\n              group = layers[[3]],\n              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[3]], domain = by_zip$quality)(quality),\n              stroke = TRUE, color = \"#FFFFFF\", weight = 1.5, opacity = 0,\n              popup = paste0(\"<b>\", by_zip$zip_5, \"</b><br>\",\n                             \"Quality dollars received: \", scales::dollar(by_zip$quality)),\n              highlight = highlightOptions(\n                weight = 1.5,\n                fillOpacity = 0.7,\n                color = \"#333333\",\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE)\n              ) %>%\n  addPolygons(data = by_zip,\n              group = layers[[4]],\n              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[4]], domain = by_zip$children)(children),\n              stroke = TRUE, color = \"#FFFFFF\", weight = 1.5, opacity = 0,\n              popup = paste0(\"<b>\", by_zip$zip_5, \"</b><br>\",\n                             \"Number of children: \", by_zip$children),\n              highlight = highlightOptions(\n                weight = 1.5,\n                fillOpacity = 0.7,\n                color = \"#333333\",\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE)\n              ) %>%\n  addPolygons(data = by_zip,\n              group = layers[[5]],\n              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[5]], domain = by_zip$visits)(visits),\n              stroke = TRUE, color = \"#FFFFFF\", weight = 1.5, opacity = 0,\n              popup = paste0(\"<b>\", by_zip$zip_5, \"</b><br>\",\n                             \"Number of visits: \", by_zip$visits),\n              highlight = highlightOptions(\n                weight = 1.5,\n                fillOpacity = 0.7,\n                color = \"#333333\",\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE)\n              ) %>%\n  addPolygons(data = by_zip,\n              group = layers[[6]],\n              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[6]], domain = by_zip$visits_provider)(visits_provider),\n              stroke = TRUE, color = \"#FFFFFF\", weight = 1.5, opacity = 0,\n              popup = paste0(\"<b>\", by_zip$zip_5, \"</b><br>\",\n                             \"Visits per provider: \", scales::number(by_zip$visits_provider, accuracy = 0.01)),\n              highlight = highlightOptions(\n                weight = 1.5,\n                fillOpacity = 0.7,\n                color = \"#333333\",\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE)\n              ) %>%\n  addPolygons(data = by_zip,\n              group = layers[[7]],\n              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[7]], domain = by_zip$qd_provider)(qd_provider),\n              stroke = TRUE, color = \"#FFFFFF\", weight = 1.5, opacity = 0,\n              popup = paste0(\"<b>\", by_zip$zip_5, \"</b><br>\",\n                             \"Quality dollars per provider: \", scales::dollar(by_zip$qd_provider)),\n              highlight = highlightOptions(\n                weight = 1.5,\n                fillOpacity = 0.7,\n                color = \"#333333\",\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE)\n              ) %>%\n  addPolygons(data = by_zip,\n              group = layers[[8]],\n              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[8]], domain = by_zip$qd_prop)(qd_prop),\n              stroke = TRUE, color = \"#FFFFFF\", weight = 1.5, opacity = 0,\n              popup = paste0(\"<b>\", by_zip$zip_5, \"</b><br>\",\n                             \"Percent of all quality dollars: \", scales::dollar(by_zip$qd_prop)),\n              highlight = highlightOptions(\n                weight = 1.5,\n                fillOpacity = 0.7,\n                color = \"#333333\",\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE)\n              ) %>%\n  addPolygons(\n    group = layers,\n    data = dallas_co,\n    fillColor = \"#333333\",\n    fillOpacity = 0.0, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  addLayersControl(\n    baseGroups = layers,\n    position = \"topleft\",\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])\n\n```\n\n```{=html}\n\n<script>\nfunction scrollToMap() {\n    const element = document.getElementById('cca-map');\n    const headerOffset = 70; // height of your fixed header\n    const elementPosition = element.getBoundingClientRect().top;\n    const offsetPosition = elementPosition + window.pageYOffset - headerOffset;\n\n    window.scrollTo({\n        top: offsetPosition,\n        behavior: 'smooth'\n    });\n}\n</script>\n\n```\n\n\n```{=html}\n</div>\n</div>\n\n```\n\n:::","srcMarkdownNoYaml":"\n\n```{r setup, output = F, echo = F}\n\nlibrary(tidycensus)\nlibrary(sf)\nrequire(tidyverse)\nlibrary(leaflet)\n\ndallas_co <- tigris::counties(state = \"TX\") %>%\n  filter(NAME == \"Dallas\")\n\nbounds <- sf::st_bbox(dallas_co)\n\nexpanded_bounds <- as.vector(c(\n  xmin = bounds[\"xmin\"] - 0.25,\n  ymin = bounds[\"ymin\"] - 0.25,\n  xmax = bounds[\"xmax\"] + 0.25,\n  ymax = bounds[\"ymax\"] + 0.25\n))\n\ncca <- readxl::read_xlsx(\"data/CCA Jan2024.xlsx\", sheet = \"Snapshot1\") %>%\n  filter(county == \"113 - DALLAS\")\n# zips <- unique(cca$zip_5)\n\n# counties <- c(\"Dallas County\", \"Collin County\", \"Tarrant County\", \"Denton County\")\n# tracts <- tigris::tracts(state=\"TX\", county=counties, year=2022)\n# zctas <- tigris::zctas(starts_with = \"7\") %>%\n#   select(\n#     zip_5 = \"GEOID20\",\n#     geometry\n#   ) %>%\n#   filter(zip_5 %in% zips)\n# st_write(zctas, \"data/zctas.geojson\")\nzctas <- st_read(\"data/zctas.geojson\")\n\n\n# geocoded <- readxl::read_xlsx(\"data/CCA Jan2024.xlsx\", sheet = \"Visits\") %>%\n#   mutate(\n#     address = paste0(Street, \" \", City, \", \", State, \" \", `Zip Code`)\n#   ) %>%\n#   select(\n#     license_no = \"License Number\", address\n#   ) %>%\n#   distinct(license_no, .keep_all = TRUE) %>%\n#   tidygeocoder::geocode(\n#     address = \"address\",\n#     method = \"arcgis\"\n#   )\n# export <- left_join(cca, geocoded) %>%\n#   st_as_sf(coords = c(\"long\", \"lat\"))\n\nby_zip <- cca %>%\n  group_by(zip_5) %>%\n  summarize(\n    providers = n(),\n    subsidy = sum(`fund paid for month (accrual)` + `fund paid in month (cash)`),\n    quality = sum(`Quality Dollars Received`),\n    children = sum(`Children Grand Total`),\n    visits = sum(`Total Visits`)\n  ) %>%\n  mutate(\n    visits_provider = visits/providers,\n    qd_provider = quality/providers,\n    qd_prop = quality/sum(cca$`Quality Dollars Received`)\n  ) %>%\n  left_join(zctas) %>%\n  st_as_sf()\n\nsummary_df <- cca %>%\n  group_by(designation_desc, zip_5) %>%\n  summarize(\n    providers = n(),\n    subsidy = sum(`fund paid for month (accrual)` + `fund paid in month (cash)`),\n    quality = sum(`Quality Dollars Received`),\n    children = sum(`Children Grand Total`),\n    visits = sum(`Total Visits`)\n  ) %>%\n  mutate(\n    visits_provider = visits/providers,\n    qd_provider = quality/providers,\n    qd_prop = quality/sum(cca$`Quality Dollars Received`),\n    designation_desc = ifelse(is.na(designation_desc), \"Other\", designation_desc)\n  )\n\nlibrary(reactable)\n\nsummary_rt <- summary_df %>%\n  reactable(\n    width = \"53vw\",\n    groupBy = \"designation_desc\",\n    paginateSubRows = TRUE,\n    defaultColDef = colDef(minWidth = 150),\n    columns = list(\n      designation_desc = colDef(\n        name = \"Rating\",\n        sticky = \"left\",\n        minWidth = 180,\n        grouped = JS(\"function(cellInfo) {\n          return cellInfo.value\n        }\")),\n      zip_5 = colDef(\n        name = \"ZIP\",\n        sticky = \"left\",\n        format = colFormat(),\n        filterable = T),\n      providers = colDef(\n        name = \"Providers\",\n        format = colFormat(),\n        aggregate = \"sum\"),\n      subsidy = colDef(\n        name = \"Subsidy dollars\", \n        format = colFormat(currency = \"USD\", separators = TRUE),\n        minWidth = 165,\n        aggregate = \"sum\"),\n      quality = colDef(\n        name = \"Quality dollars\",\n        format = colFormat(currency = \"USD\", separators = TRUE),\n        minWidth = 165,\n        aggregate = \"sum\"),\n      children = colDef(\n        name = \"Num. children\", \n        format = colFormat(),\n        aggregate = \"sum\"),\n      visits = colDef(\n        name = \"Visits\", \n        format = colFormat(),\n        aggregate = \"sum\"),\n      visits_provider = colDef(\n        name = \"Visits/provider\",\n        format = colFormat(digits = 3),\n        aggregate = JS(\"function(values, rows) {\n          let totalVisits = 0\n          let totalProviders = 0\n          rows.forEach(function(row) {\n            totalVisits += row['visits']\n            totalProviders += row['providers']\n          })\n          return totalVisits / totalProviders\n        }\")\n      ),\n      qd_provider = colDef(\n        name = \"QD/provider\",\n        format = colFormat(currency = \"USD\", separators = TRUE),\n        aggregate = JS(\"function(values, rows) {\n          let totalQuality = 0\n          let totalProviders = 0\n          rows.forEach(function(row) {\n            totalQuality += row['quality']\n            totalProviders += row['providers']\n          })\n          return totalQuality / totalProviders\n        }\")\n      ),\n      qd_prop = colDef(\n        name = \"Pct. of total QD\",\n        format = colFormat(percent = TRUE, digits = 2),\n        aggregate = JS(paste0(\"function(values, rows) {\n          let totalQuality = 0\n          let allQuality = \", sum(cca$`Quality Dollars Received`), \"\n          rows.forEach(function(row) {\n            totalQuality += row['quality']\n          })\n          return totalQuality / allQuality\n        }\"))\n      )\n    )\n  )\n\n```\n\n::: column-screen-inset\n\n```{=html}\n<div class=\"mainboxbox\">\n<div class=\"mainbox\">\n```\n\n:::: {.card}\n\n```{=html}\n<div class=\"cardbox\">\n\n<div class=\"left-card-col dark-col\">\n```\n\n```{=html}\n  <div class=\"card-side\" style=\"width: 94%;\">\n```\n\n# Title\n\n```{=html}\n    <div class=\"subtext\">\n      Write a description and/or choose a \"big number\" to go here\n    </div>\n  </div>\n</div>\n```\n\n```{=html}\n<div class=\"right-card-col\">\n\n  <div style=\"width: 3%\">\n  </div>\n\n  <div class=\"card-side\">\n```    \n\n```{r reactable}\nsummary_rt\n```\n\n```{=html}\n  </div>\n</div>\n\n</div>\n\n```\n\n::::\n\n```{=html}\n\n<div class=\"mapscroll-container\">\n  <a href=\"javascript:void(0);\" class=\"scroll-link\" onclick=\"scrollToMap()\">\n      Click for map <i class=\"bi bi-chevron-down\"></i>\n  </a>\n</div>\n\n```\n\n```{r map}\n\nlayers <- c(\"Providers\", \"Subsidy dollars\", \"Quality dollars\", \"Num. children\", \"Visits\", \"Visits/provider\", \"QD/provider\", \"Pct. of total QD\")\npalette <- cpaltemplates::palette_cpal_main\n\npalettes <- lapply(palette, function(color, n = 8) {colorRampPalette(c(\"#FFFFFF\", color))(n)}, n = 8)\n\nleaflet( data = by_zip, \n         height = \"90vh\", \n         width = \"100%\", \n         elementId = \"cca-map\",\n         options = leafletOptions(\n           zoomControl = F,\n           zoomSnap = 0.5,\n           zoomDelta = 0.5,\n           minZoom = 9.5,\n           wheelPxPerZoomLevel = 90\n           )\n         ) %>%\n  addTiles(urlTemplate = cpaltemplates::cpal_mapbox_mono, attribution = cpaltemplates::cpal_leaflet) %>%\n  addPolygons(data = by_zip,\n              group = layers[[1]],\n              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[1]], domain = by_zip$providers)(providers),\n              stroke = TRUE, color = \"#FFFFFF\", weight = 1.5, opacity = 0,\n              popup = paste0(\"<b>\", by_zip$zip_5, \"</b><br>\",\n                             \"Providers: \", by_zip$providers),\n              highlight = highlightOptions(\n                weight = 1.5,\n                fillOpacity = 0.7,\n                color = \"#333333\",\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE)\n              ) %>%\n  addPolygons(data = by_zip,\n              group = layers[[2]],\n              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[2]], domain = by_zip$subsidy)(subsidy),\n              stroke = TRUE, color = \"#FFFFFF\", weight = 1.5, opacity = 0,\n              popup = paste0(\"<b>\", by_zip$zip_5, \"</b><br>\",\n                             \"Subsidy dollars: \", scales::dollar(by_zip$subsidy), \"<br>\",\n                             \"(Subsidy dollars include cash and accrued)\"),\n              highlight = highlightOptions(\n                weight = 1.5,\n                fillOpacity = 0.7,\n                color = \"#333333\",\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE)\n              ) %>%\n  addPolygons(data = by_zip,\n              group = layers[[3]],\n              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[3]], domain = by_zip$quality)(quality),\n              stroke = TRUE, color = \"#FFFFFF\", weight = 1.5, opacity = 0,\n              popup = paste0(\"<b>\", by_zip$zip_5, \"</b><br>\",\n                             \"Quality dollars received: \", scales::dollar(by_zip$quality)),\n              highlight = highlightOptions(\n                weight = 1.5,\n                fillOpacity = 0.7,\n                color = \"#333333\",\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE)\n              ) %>%\n  addPolygons(data = by_zip,\n              group = layers[[4]],\n              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[4]], domain = by_zip$children)(children),\n              stroke = TRUE, color = \"#FFFFFF\", weight = 1.5, opacity = 0,\n              popup = paste0(\"<b>\", by_zip$zip_5, \"</b><br>\",\n                             \"Number of children: \", by_zip$children),\n              highlight = highlightOptions(\n                weight = 1.5,\n                fillOpacity = 0.7,\n                color = \"#333333\",\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE)\n              ) %>%\n  addPolygons(data = by_zip,\n              group = layers[[5]],\n              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[5]], domain = by_zip$visits)(visits),\n              stroke = TRUE, color = \"#FFFFFF\", weight = 1.5, opacity = 0,\n              popup = paste0(\"<b>\", by_zip$zip_5, \"</b><br>\",\n                             \"Number of visits: \", by_zip$visits),\n              highlight = highlightOptions(\n                weight = 1.5,\n                fillOpacity = 0.7,\n                color = \"#333333\",\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE)\n              ) %>%\n  addPolygons(data = by_zip,\n              group = layers[[6]],\n              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[6]], domain = by_zip$visits_provider)(visits_provider),\n              stroke = TRUE, color = \"#FFFFFF\", weight = 1.5, opacity = 0,\n              popup = paste0(\"<b>\", by_zip$zip_5, \"</b><br>\",\n                             \"Visits per provider: \", scales::number(by_zip$visits_provider, accuracy = 0.01)),\n              highlight = highlightOptions(\n                weight = 1.5,\n                fillOpacity = 0.7,\n                color = \"#333333\",\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE)\n              ) %>%\n  addPolygons(data = by_zip,\n              group = layers[[7]],\n              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[7]], domain = by_zip$qd_provider)(qd_provider),\n              stroke = TRUE, color = \"#FFFFFF\", weight = 1.5, opacity = 0,\n              popup = paste0(\"<b>\", by_zip$zip_5, \"</b><br>\",\n                             \"Quality dollars per provider: \", scales::dollar(by_zip$qd_provider)),\n              highlight = highlightOptions(\n                weight = 1.5,\n                fillOpacity = 0.7,\n                color = \"#333333\",\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE)\n              ) %>%\n  addPolygons(data = by_zip,\n              group = layers[[8]],\n              fillOpacity = 0.5, fillColor = ~colorNumeric(palette = palettes[[8]], domain = by_zip$qd_prop)(qd_prop),\n              stroke = TRUE, color = \"#FFFFFF\", weight = 1.5, opacity = 0,\n              popup = paste0(\"<b>\", by_zip$zip_5, \"</b><br>\",\n                             \"Percent of all quality dollars: \", scales::dollar(by_zip$qd_prop)),\n              highlight = highlightOptions(\n                weight = 1.5,\n                fillOpacity = 0.7,\n                color = \"#333333\",\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE)\n              ) %>%\n  addPolygons(\n    group = layers,\n    data = dallas_co,\n    fillColor = \"#333333\",\n    fillOpacity = 0.0, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  addLayersControl(\n    baseGroups = layers,\n    position = \"topleft\",\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])\n\n```\n\n```{=html}\n\n<script>\nfunction scrollToMap() {\n    const element = document.getElementById('cca-map');\n    const headerOffset = 70; // height of your fixed header\n    const elementPosition = element.getBoundingClientRect().top;\n    const offsetPosition = elementPosition + window.pageYOffset - headerOffset;\n\n    window.scrollTo({\n        top: offsetPosition,\n        behavior: 'smooth'\n    });\n}\n</script>\n\n```\n\n\n```{=html}\n</div>\n</div>\n\n```\n\n:::"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":9,"fig-height":7,"fig-format":"retina","fig-dpi":300,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"www/web_report.scss","toc-title":"Contents","toc-location":"right","anchor-sections":false,"code-summary":"Reveal Code","code-copy":"hover","smooth-scroll":true,"grid":{"sidebar-width":"250px","body-width":"900px","margin-width":"300px"},"code-block-bg":true,"code-block-border-left":"#008097","message":false,"pagetitle":"CCA"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}